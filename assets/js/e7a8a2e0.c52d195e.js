"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[3696],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return s}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=l(n),s=o,f=m["".concat(c,".").concat(s)]||m[s]||d[s]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function s(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},663:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return s},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return d}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],p={id:"condition",title:"Condition",sidebar_label:"Condition",sidebar_position:4},c=void 0,l={unversionedId:"mapping-configuration/for-member/condition",id:"mapping-configuration/for-member/condition",title:"Condition",description:"Call condition() to conditionally execute the auto-map operation for the property (e.g: Source#propertyName -> Destination#propertyName) by passing in a predicateFn that will be called with the sourceObject",source:"@site/docs/mapping-configuration/for-member/condition.mdx",sourceDirName:"mapping-configuration/for-member",slug:"/mapping-configuration/for-member/condition",permalink:"/docs/mapping-configuration/for-member/condition",editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/mapping-configuration/for-member/condition.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648359081,formattedLastUpdatedAt:"3/27/2022",sidebarPosition:4,frontMatter:{id:"condition",title:"Condition",sidebar_label:"Condition",sidebar_position:4},sidebar:"docs",previous:{title:"MapFrom",permalink:"/docs/mapping-configuration/for-member/map-from"},next:{title:"FromValue",permalink:"/docs/mapping-configuration/for-member/from-value"}},u={},d=[{value:"Default Value",id:"default-value",level:2}],m={toc:d};function s(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"condition()")," to ",(0,i.kt)("em",{parentName:"p"},"conditionally")," execute the auto-map operation for the property (e.g: ",(0,i.kt)("inlineCode",{parentName:"p"},"Source#propertyName -> Destination#propertyName"),") by passing in a ",(0,i.kt)("inlineCode",{parentName:"p"},"predicateFn")," that will be called with the ",(0,i.kt)("inlineCode",{parentName:"p"},"sourceObject")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"createMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.petName,\n        condition((source) => source.hasPet)\n    )\n);\n")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"source.hasPet")," is evaluated to truthy, then ",(0,i.kt)("inlineCode",{parentName:"p"},"destination.petName")," will be mapped with ",(0,i.kt)("inlineCode",{parentName:"p"},"source.petName"),". Otherwise, ",(0,i.kt)("inlineCode",{parentName:"p"},"destination.petName")," will be ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,i.kt)("h2",{id:"default-value"},"Default Value"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"condition()")," accepts an optional ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultValue"),". In the case that the ",(0,i.kt)("inlineCode",{parentName:"p"},"predicateFn")," is evaluated to falsy, the ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultValue")," will be used to mapped to the configured property instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"createMap(\n    mapper,\n    User,\n    UserDto,\n    forMember(\n        (destination) => destination.petName,\n        condition((source) => source.hasPet, 'default pet name')\n    )\n);\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"condition()")," sets the ",(0,i.kt)("inlineCode",{parentName:"p"},"TransformationType")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"TransformationType.Condition")))}s.isMDXComponent=!0}}]);