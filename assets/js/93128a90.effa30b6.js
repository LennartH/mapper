"use strict";(self.webpackChunkdocumentations=self.webpackChunkdocumentations||[]).push([[7687],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),l=s(n),d=a,f=l["".concat(p,".").concat(d)]||l[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=l;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},5676:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],u={id:"mutation",title:"Mutation",sidebar_label:"Mutation",sidebar_position:5},p=void 0,s={unversionedId:"fundamentals/mutation",id:"fundamentals/mutation",title:"Mutation",description:"AutoMapper provides a way to map mutably using the mutate() API (and its variants)",source:"@site/docs/fundamentals/mutation.mdx",sourceDirName:"fundamentals",slug:"/fundamentals/mutation",permalink:"/docs/fundamentals/mutation",editUrl:"https://github.com/nartc/mapper/tree/main/packages/documentations/docs/fundamentals/mutation.mdx",tags:[],version:"current",lastUpdatedBy:"Chau Tran",lastUpdatedAt:1648359081,formattedLastUpdatedAt:"3/27/2022",sidebarPosition:5,frontMatter:{id:"mutation",title:"Mutation",sidebar_label:"Mutation",sidebar_position:5},sidebar:"docs",previous:{title:"Auto Flattening",permalink:"/docs/fundamentals/auto-flattening"},next:{title:"Overview",permalink:"/docs/mapping-configuration/overview"}},c={},m=[],l={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"AutoMapper provides a way to map ",(0,o.kt)("em",{parentName:"p"},"mutably")," using the ",(0,o.kt)("inlineCode",{parentName:"p"},"mutate()")," API (and its variants)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"mapper.map();\nmapper.mapAsync();\nmapper.mapArray();\nmapper.mapArrayAsync();\n\nmapper.mutate();\nmapper.mutateAsync();\nmapper.mutateArray();\nmapper.mutateArrayAsync();\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"mutate()")," API returns ",(0,o.kt)("inlineCode",{parentName:"p"},"void")," as we would pass in the ",(0,o.kt)("inlineCode",{parentName:"p"},"destinationObject")," to mutate"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// map()\nconst dto = mapper.map(user, User, UserDto);\n\n// mutate()\nlet dto = {};\nmapper.mutate(user, dto, User, UserDto);\n")))}d.isMDXComponent=!0}}]);